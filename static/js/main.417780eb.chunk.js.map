{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["checkLine","a","b","c","d","Hole","props","className","value","Slat","onClick","handleClick","Array","holes","length","map","x","j","Board","winnerMessageStyle","useState","fill","boardState","setBoardState","winner","setWinner","playerTurn","setPlayTurn","gameSelected","setGameSelected","slatID","boardCopy","arr","slice","indexOf","newSlat","reverse","makeMove","useEffect","check_winner","bs","r","checkWinner","slats","i","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.417780eb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction checkLine(a, b, c, d) {\n  return a !== null && a === b && a === c && a === d;\n}\n\nfunction checkWinner(bs) {\n  for (let c = 0; c < 7; c++)\n    for (let r = 0; r < 4; r++)\n      if (checkLine(bs[c][r], bs[c][r + 1], bs[c][r + 2], bs[c][r + 3]))\n        return bs[c][r] + ' wins!';\n\n  for (let r = 0; r < 6; r++)\n    for (let c = 0; c < 4; c++)\n      if (checkLine(bs[c][r], bs[c + 1][r], bs[c + 2][r], bs[c + 3][r]))\n        return bs[c][r] + ' wins!';\n\n  for (let r = 0; r < 3; r++)\n    for (let c = 0; c < 4; c++)\n      if (\n        checkLine(\n          bs[c][r],\n          bs[c + 1][r + 1],\n          bs[c + 2][r + 2],\n          bs[c + 3][r + 3]\n        )\n      )\n        return bs[c][r] + ' wins!';\n\n  for (let r = 0; r < 4; r++)\n    for (let c = 3; c < 6; c++)\n      if (\n        checkLine(\n          bs[c][r],\n          bs[c - 1][r + 1],\n          bs[c - 2][r + 2],\n          bs[c - 3][r + 3]\n        )\n      )\n        return bs[c][r] + ' wins!';\n\n  return '';\n}\n\nfunction Hole(props) {\n  return (\n    <div className=\"Hole\">\n      <div className={props.value}></div>\n    </div>\n  );\n}\n\nfunction Slat(props) {\n  return (\n    <div className=\"Slat\" onClick={() => props.handleClick()}>\n      {[...Array(props.holes.length)].map((x, j) => (\n        <Hole key={j} value={props.holes[j]}></Hole>\n      ))}\n    </div>\n  );\n}\n\nfunction Board(props) {\n  const [boardState, setBoardState] = useState(\n    new Array(7).fill(new Array(6).fill(null))\n  );\n  const [winner, setWinner] = useState('');\n  const [playerTurn, setPlayTurn] = useState('Red');\n  const [gameSelected, setGameSelected] = useState(false);\n\n  const selectedGame = () => {\n    setGameSelected(true);\n    setBoardState(new Array(7).fill(new Array(6).fill(null)));\n  };\n\n  const makeMove = (slatID) => {\n    const boardCopy = boardState.map(function (arr) {\n      return arr.slice();\n    });\n    if (boardCopy[slatID].indexOf(null) !== -1) {\n      let newSlat = boardCopy[slatID].reverse();\n      newSlat[newSlat.indexOf(null)] = playerTurn;\n      newSlat.reverse();\n      setPlayTurn(playerTurn === 'Red' ? 'Blue' : 'Red');\n      setBoardState(boardCopy);\n    }\n  };\n\n  const handleClick = (slatID) => {\n    if (winner === '') {\n      makeMove(slatID);\n    }\n  };\n\n  useEffect(() => {\n    let check_winner = checkWinner(boardState);\n    if (winner !== check_winner) {\n      setWinner(check_winner);\n    }\n  }, [boardState, winner]);\n\n  let winnerMessageStyle;\n  if (winner !== '') {\n    winnerMessageStyle = 'winnerMessage appear';\n  } else {\n    winnerMessageStyle = 'winnerMessage';\n  }\n\n  /*Contruct slats allocating column from board*/\n  let slats = [...Array(boardState.length)].map((x, i) => (\n    <Slat\n      key={i}\n      holes={boardState[i]}\n      handleClick={() => handleClick(i)}\n    ></Slat>\n  ));\n\n  return (\n    <div>\n      {gameSelected && <div className=\"Board\">{slats}</div>}\n      <div className={winnerMessageStyle}>{winner}</div>\n      {(!gameSelected || winner !== '') && (\n        <div>\n          <button onClick={() => selectedGame()}>Play</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h4>This is mine</h4>\n      </div>\n      <div className=\"Game\">\n        <Board></Board>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}